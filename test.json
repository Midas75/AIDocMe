{"content": [{"level": 0, "seq": "", "doc_i": 0, "doc_type": "MODULE", "doc": "no module docs", "start": 0, "end": 7871, "doc_start": 0, "doc_end": 0, "signature": "Module", "title": "Module"}, {"level": 1, "seq": "1.", "doc_i": 2, "doc_type": "CLASS", "doc": "no class docs", "start": 300, "end": 364, "doc_start": 325, "doc_end": 325, "signature": "class DocType(Enum):", "title": "DocType"}, {"level": 1, "seq": "2.", "doc_i": 4, "doc_type": "CLASS", "doc": "no class docs", "start": 367, "end": 1374, "doc_start": 386, "doc_end": 386, "signature": "class Content:", "title": "Content"}, {"level": 2, "seq": "2.1.", "doc_i": 6, "doc_type": "METHOD", "doc": "no method docs", "start": 531, "end": 1023, "doc_start": 771, "doc_end": 771, "signature": "def __init__(\n    self,\n    level: int,\n    doc_type: DocType,\n    doc: str,\n    start: int,\n    end: int,\n    doc_start: int,\n    doc_end: int,\n    signature: str,\n    title: str,\n):", "title": "__init__"}, {"level": 2, "seq": "2.2.", "doc_i": 8, "doc_type": "METHOD", "doc": "no method docs", "start": 1025, "end": 1312, "doc_start": 1064, "doc_end": 1064, "signature": "def __repr__(self) -> str:", "title": "__repr__"}, {"level": 2, "seq": "2.3.", "doc_i": 10, "doc_type": "METHOD", "doc": "no method docs", "start": 1314, "end": 1374, "doc_start": 1352, "doc_end": 1352, "signature": "def __str__(self) -> str:", "title": "__str__"}, {"level": 1, "seq": "3.", "doc_i": 12, "doc_type": "CLASS", "doc": "no class docs", "start": 1377, "end": 1784, "doc_start": 1397, "doc_end": 1397, "signature": "class Sequence:", "title": "Sequence"}, {"level": 2, "seq": "3.1.", "doc_i": 14, "doc_type": "METHOD", "doc": "no method docs", "start": 1416, "end": 1464, "doc_start": 1448, "doc_end": 1448, "signature": "def __init__(self):", "title": "__init__"}, {"level": 2, "seq": "3.2.", "doc_i": 16, "doc_type": "METHOD", "doc": "no method docs", "start": 1466, "end": 1784, "doc_start": 1521, "doc_end": 1521, "signature": "def next_seq(self, level: int = 1) -> str:", "title": "next_seq"}, {"level": 1, "seq": "4.", "doc_i": 18, "doc_type": "METHOD", "doc": "no method docs", "start": 1787, "end": 2256, "doc_start": 1875, "doc_end": 1875, "signature": "def seg_source(source: str, contents: list[Content]) -> list[tuple[int, int, str]]:", "title": "seg_source"}, {"level": 1, "seq": "5.", "doc_i": 20, "doc_type": "METHOD", "doc": "no method docs", "start": 2259, "end": 2848, "doc_start": 2390, "doc_end": 2390, "signature": "def get_docstring_range(\n    node: Module | ClassDef | FunctionDef | AsyncFunctionDef, tokens: ASTTokens\n) -> tuple[int, int]:", "title": "get_docstring_range"}, {"level": 1, "seq": "6.", "doc_i": 22, "doc_type": "METHOD", "doc": "no method docs", "start": 2851, "end": 3281, "doc_start": 2887, "doc_end": 2887, "signature": "def normalize_indent(code_str):", "title": "normalize_indent"}, {"level": 2, "seq": "6.1.", "doc_i": 24, "doc_type": "METHOD", "doc": "no method docs", "start": 3014, "end": 3206, "doc_start": 3049, "doc_end": 3049, "signature": "def replace_indent(m):", "title": "replace_indent"}, {"level": 1, "seq": "7.", "doc_i": 26, "doc_type": "METHOD", "doc": "no method docs", "start": 3284, "end": 5228, "doc_start": 3361, "doc_end": 3361, "signature": "def visit(node, tokens: ASTTokens, level: int, contents: list[Content]):", "title": "visit"}, {"level": 1, "seq": "8.", "doc_i": 28, "doc_type": "METHOD", "doc": "no method docs", "start": 5231, "end": 5327, "doc_start": 5283, "doc_end": 5283, "signature": "def jsonify(serialized: dict[str, Any]) -> str:", "title": "jsonify"}, {"level": 1, "seq": "9.", "doc_i": 30, "doc_type": "METHOD", "doc": "no method docs", "start": 5330, "end": 6228, "doc_start": 5386, "doc_end": 5386, "signature": "def markdownify(serialized: dict[str, Any]) -> str:", "title": "markdownify"}, {"level": 1, "seq": "10.", "doc_i": 32, "doc_type": "METHOD", "doc": "no method docs", "start": 6231, "end": 7161, "doc_start": 6332, "doc_end": 6332, "signature": "def serialize(\n    contents: list[Content], seg: list[tuple[int, int, str]]\n) -> dict[str, Any]:", "title": "serialize"}, {"level": 1, "seq": "11.", "doc_i": 34, "doc_type": "METHOD", "doc": "no method docs", "start": 7164, "end": 7520, "doc_start": 7266, "doc_end": 7266, "signature": "def process(\n    filepath: str = __file__,\n) -> tuple[list[Content], list[tuple[int, int, str]]]:", "title": "process"}, {"level": 1, "seq": "12.", "doc_i": 36, "doc_type": "METHOD", "doc": "no method docs", "start": 7523, "end": 7831, "doc_start": 7539, "doc_end": 7539, "signature": "def main():", "title": "main"}], "seg": [{"seg_start": 0, "seg_end": 0, "content": ""}, {"seg_start": 0, "seg_end": 325, "content": "import sys\nfrom enum import Enum\nfrom typing import Any\nfrom json import dumps\nfrom ast import (\n    parse,\n    Module,\n    get_docstring,\n    FunctionDef,\n    AsyncFunctionDef,\n    ClassDef,\n    iter_child_nodes,\n    Expr,\n    Constant,\n)\nfrom re import match, sub\nfrom asttokens import ASTTokens\n\n\nclass DocType(Enum):\n    "}, {"seg_start": 325, "seg_end": 325, "content": ""}, {"seg_start": 325, "seg_end": 386, "content": "MODULE = 0\n    METHOD = 1\n    CLASS = 2\n\n\nclass Content:\n    "}, {"seg_start": 386, "seg_end": 386, "content": ""}, {"seg_start": 386, "seg_end": 771, "content": "level: int\n    doc_type: DocType\n    doc: str\n    start: int\n    end: int\n    doc_start: int\n    doc_end: int\n    signature: str\n    title: str\n\n    def __init__(\n        self,\n        level: int,\n        doc_type: DocType,\n        doc: str,\n        start: int,\n        end: int,\n        doc_start: int,\n        doc_end: int,\n        signature: str,\n        title: str,\n    ):\n        "}, {"seg_start": 771, "seg_end": 771, "content": ""}, {"seg_start": 771, "seg_end": 1064, "content": "self.level = level\n        self.doc_type = doc_type\n        self.doc = doc\n        self.start = start\n        self.end = end\n        self.doc_start = doc_start\n        self.doc_end = doc_end\n        self.signature = signature\n        self.title = title\n\n    def __repr__(self) -> str:\n        "}, {"seg_start": 1064, "seg_end": 1064, "content": ""}, {"seg_start": 1064, "seg_end": 1352, "content": "return str(\n            [\n                self.level,\n                self.doc_type,\n                self.doc,\n                self.start,\n                self.end,\n                self.signature,\n                self.title,\n            ]\n        )\n\n    def __str__(self) -> str:\n        "}, {"seg_start": 1352, "seg_end": 1352, "content": ""}, {"seg_start": 1352, "seg_end": 1397, "content": "return self.__repr__()\n\n\nclass Sequence:\n    "}, {"seg_start": 1397, "seg_end": 1397, "content": ""}, {"seg_start": 1397, "seg_end": 1448, "content": "number: list[int]\n\n    def __init__(self):\n        "}, {"seg_start": 1448, "seg_end": 1448, "content": ""}, {"seg_start": 1448, "seg_end": 1521, "content": "self.number = []\n\n    def next_seq(self, level: int = 1) -> str:\n        "}, {"seg_start": 1521, "seg_end": 1521, "content": ""}, {"seg_start": 1521, "seg_end": 1875, "content": "if level < 1:\n            return \"\"\n        while len(self.number) < level:\n            self.number.append(0)\n        self.number[level - 1] += 1\n        self.number = self.number[:level]\n        return \".\".join(str(n) for n in self.number[:level] if n > 0) + \".\"\n\n\ndef seg_source(source: str, contents: list[Content]) -> list[tuple[int, int, str]]:\n    "}, {"seg_start": 1875, "seg_end": 1875, "content": ""}, {"seg_start": 1875, "seg_end": 2390, "content": "result = list[tuple[int, int, str]]()\n    last_e = 0\n    for c in contents:\n        if last_e != c.doc_start:\n            result.append((last_e, c.doc_start, source[last_e : c.doc_start]))\n        doc = source[c.doc_start : c.doc_end]\n        result.append((c.doc_start, c.doc_end, doc))\n        last_e = c.doc_end\n    result.append((last_e, -1, source[last_e:]))\n    return result\n\n\ndef get_docstring_range(\n    node: Module | ClassDef | FunctionDef | AsyncFunctionDef, tokens: ASTTokens\n) -> tuple[int, int]:\n    "}, {"seg_start": 2390, "seg_end": 2390, "content": ""}, {"seg_start": 2390, "seg_end": 2887, "content": "doc_node = None\n    if (  # dont care if node.body is not None and node.body[0] is not None\n        isinstance(node.body[0], Expr)\n        and isinstance(node.body[0].value, Constant)\n        and isinstance(node.body[0].value.value, str)\n    ):\n        doc_node = node.body[0]\n    if doc_node is None:\n        ds, _ = tokens.get_text_range(node.body[0],False)\n        de = ds\n    else:\n        ds, de = tokens.get_text_range(doc_node,False)\n    return ds, de\n\n\ndef normalize_indent(code_str):\n    "}, {"seg_start": 2887, "seg_end": 2887, "content": ""}, {"seg_start": 2887, "seg_end": 3049, "content": "lines = code_str.splitlines()\n    if not lines:\n        return code_str\n    indent_base = len(match(r\" *\", lines[0]).group())\n\n    def replace_indent(m):\n        "}, {"seg_start": 3049, "seg_end": 3049, "content": ""}, {"seg_start": 3049, "seg_end": 3361, "content": "newline = m.group(1)\n        spaces = m.group(2)\n        new_space_count = max(len(spaces) - indent_base, 0)\n        return newline + (\" \" * new_space_count)\n\n    result = sub(r\"(\\n)( *)\", replace_indent, code_str)\n    return result\n\n\ndef visit(node, tokens: ASTTokens, level: int, contents: list[Content]):\n    "}, {"seg_start": 3361, "seg_end": 3361, "content": ""}, {"seg_start": 3361, "seg_end": 5283, "content": "s, e = tokens.get_text_range(node)\n    if isinstance(node, (Module, ClassDef, FunctionDef, AsyncFunctionDef)):\n        d = get_docstring(node)\n        ds, de = get_docstring_range(node, tokens)\n    if isinstance(node, Module):\n        contents.append(\n            Content(\n                level,\n                doc_type=DocType.MODULE,\n                doc=\"no module docs\" if d is None else d,\n                start=s,\n                end=e,\n                doc_start=ds,\n                doc_end=de,\n                signature=\"Module\",\n                title=\"Module\",\n            )\n        )\n    elif isinstance(node, FunctionDef | AsyncFunctionDef):\n        bs, _ = tokens.get_text_range(node.body[0])\n        sig = tokens.get_text(node)[: bs - s]\n        sig = sig[: sig.rfind(\":\") + 1]\n        sig = normalize_indent(sig).lstrip()\n        contents.append(\n            Content(\n                level,\n                doc_type=DocType.METHOD,\n                doc=\"no method docs\" if d is None else d,\n                start=s,\n                end=e,\n                doc_start=ds,\n                doc_end=de,\n                signature=sig,\n                title=node.name,\n            )\n        )\n    elif isinstance(node, ClassDef):\n        bs, _ = tokens.get_text_range(node.body[0])\n        sig = tokens.get_text(node)[: bs - s]\n        sig = sig[: sig.rfind(\":\") + 1]\n        sig = normalize_indent(sig).lstrip()\n        contents.append(\n            Content(\n                level,\n                doc_type=DocType.CLASS,\n                doc=\"no class docs\" if d is None else d,\n                start=s,\n                end=e,\n                doc_start=ds,\n                doc_end=de,\n                signature=sig,\n                title=node.name,\n            )\n        )\n    for child in iter_child_nodes(node):\n        visit(child, tokens, level + 1, contents)\n\n\ndef jsonify(serialized: dict[str, Any]) -> str:\n    "}, {"seg_start": 5283, "seg_end": 5283, "content": ""}, {"seg_start": 5283, "seg_end": 5386, "content": "return dumps(serialized, ensure_ascii=False)\n\n\ndef markdownify(serialized: dict[str, Any]) -> str:\n    "}, {"seg_start": 5386, "seg_end": 5386, "content": ""}, {"seg_start": 5386, "seg_end": 6332, "content": "result_list = list[str]()\n    for content in serialized[\"content\"]:\n        result_list.append(\n            f\"{'#'*(content['level']+1)} \"\n            f\"{content['seq']} \"\n            f\"[`{content['title']}`]\"\n            f\"(range://?\"\n            f\"s={content['start']}&e={content['end']}\"\n            f\"&di={content['doc_i']}\"\n            f\"&ds={content['doc_start']}&de={content['doc_end']})\"\n        )\n        result_list.append(f\"```plaintext\\n{content['doc']}\\n```\")\n        if content[\"doc_type\"] == DocType.MODULE.name:\n            pass\n        elif content[\"doc_type\"] == DocType.METHOD.name:\n            result_list.append(f\"```python\\n{content['signature']}\\n```\")\n        elif content[\"doc_type\"] == DocType.CLASS.name:\n            result_list.append(f\"```python\\n{content['signature']}\\n```\")\n\n    return \"\\n\\n\".join(result_list)\n\n\ndef serialize(\n    contents: list[Content], seg: list[tuple[int, int, str]]\n) -> dict[str, Any]:\n    "}, {"seg_start": 6332, "seg_end": 6332, "content": ""}, {"seg_start": 6332, "seg_end": 7266, "content": "result = dict[str, Any]()\n    result[\"content\"] = list[dict]()\n    result[\"seg\"] = list[dict]()\n    seq = Sequence()\n    seg_idx = 0\n    for c in contents:\n        while seg[seg_idx][0] < c.doc_start:\n            seg_idx += 1\n        result[\"content\"].append(\n            {\n                \"level\": c.level,\n                \"seq\": seq.next_seq(c.level),\n                \"doc_i\": seg_idx,\n                \"doc_type\": c.doc_type.name,\n                \"doc\": c.doc,\n                \"start\": c.start,\n                \"end\": c.end,\n                \"doc_start\": c.doc_start,\n                \"doc_end\": c.doc_end,\n                \"signature\": c.signature,\n                \"title\": c.title,\n            }\n        )\n    for ss, se, sc in seg:\n        result[\"seg\"].append({\"seg_start\": ss, \"seg_end\": se, \"content\": sc})\n    return result\n\n\ndef process(\n    filepath: str = __file__,\n) -> tuple[list[Content], list[tuple[int, int, str]]]:\n    "}, {"seg_start": 7266, "seg_end": 7266, "content": ""}, {"seg_start": 7266, "seg_end": 7539, "content": "contents = list[Content]()\n    with open(filepath, encoding=\"utf-8\") as f:\n        source = f.read()\n    tree = parse(source)\n    tokens = ASTTokens(source, tree=tree)\n    visit(tree, tokens, 0, contents)\n    return contents, seg_source(source, contents)\n\n\ndef main():\n    "}, {"seg_start": 7539, "seg_end": 7539, "content": ""}, {"seg_start": 7539, "seg_end": -1, "content": "if len(sys.argv) > 1:\n        l, s = process(sys.argv[1])\n    else:\n        l, s = process()\n    ser = serialize(l, s)\n    with open(\"test.md\", \"w\", encoding=\"utf-8\") as f:\n        f.write(markdownify(ser))\n    with open(\"test.json\", \"w\", encoding=\"utf-8\") as f:\n        f.write(jsonify(ser))\n\n\nif __name__ == \"__main__\":\n    main()\n"}]}